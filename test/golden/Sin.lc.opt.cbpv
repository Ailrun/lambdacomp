e_pow =
  return
    (thunk
       (rec (e_pow : Up (Double -> Int -> Down Double)) ->
          \ (aa_0_4 : Double) (e_n : Int) ->
            (e_n <= 0) to c_c_1 ->
            if c_c_1
            then return 1.0
            else
            (e_n - 1) to c_a1_3 ->
            (force e_pow) aa_0_4 c_a1_3 to c_inp1_4 -> aa_0_4 *. c_inp1_4))
;;
e_fact =
  return
    (thunk
       (rec (e_fact : Up (Int -> Down Int)) ->
          \ (e_x : Int) ->
            (e_x <= 0) to c_c_7 ->
            if c_c_7
            then return 1
            else
            (e_x - 1) to c_a0_9 ->
            (force e_fact) c_a0_9 to c_inp1_10 -> e_x * c_inp1_10))
;;
e_sinEntry =
  return
    (thunk
       (\ (aa_0_1 : Double) (e_n : Int) ->
          (force #e_pow) aa_0_1 e_n to c_inp0_15 ->
          (force #e_fact) e_n to c_inp_14 ->
          intToDouble c_inp_14 to c_inp1_15 -> c_inp0_15 /. c_inp1_15))
;;
e_sin =
  return
    (thunk
       (\ (e_x : Double) ->
          (force #e_sinEntry) e_x 1 to c_inp0_18 ->
          (force #e_sinEntry) e_x 3 to c_inp1_18 ->
          (c_inp0_18 -. c_inp1_18) to c_inp0_20 ->
          (force #e_sinEntry) e_x 5 to c_inp1_20 ->
          (c_inp0_20 +. c_inp1_20) to c_inp0_22 ->
          (force #e_sinEntry) e_x 7 to c_inp1_22 ->
          (c_inp0_22 -. c_inp1_22) to c_inp0_24 ->
          (force #e_sinEntry) e_x 9 to c_inp1_24 ->
          (c_inp0_24 +. c_inp1_24) to c_inp0_26 ->
          (force #e_sinEntry) e_x 11 to c_inp1_26 ->
          (c_inp0_26 -. c_inp1_26) to c_inp0_28 ->
          (force #e_sinEntry) e_x 13 to c_inp1_28 ->
          (c_inp0_28 +. c_inp1_28) to c_inp0_30 ->
          (force #e_sinEntry) e_x 15 to c_inp1_30 -> c_inp0_30 -. c_inp1_30))
;;
e_main = (force #e_sin) 0.5 to c_v_32 -> printDouble c_v_32 then return 0
e_pow =
  return
    (thunk
       (\ (aa_0_5 : Double) (aa_1_5 : Int) ->
          ((return
              (thunk
                 (\ (aa_0_7 : Double) ->
                    return
                      (thunk
                         (\ (aa_1_7 : Int) ->
                            (rec (e_pow : Up (Double -> Int -> Down Double)) ->
                               \ (aa_0_4 : Double) (aa_1_4 : Int) ->
                                 ((return
                                     (thunk
                                        ((return
                                            (thunk
                                               (\ (e_x : Double) ->
                                                  return
                                                    (thunk
                                                       (\ (e_n : Int) ->
                                                          ((return e_n)
                                                           to c_inp0_0 ->
                                                           (return 0)
                                                           to c_inp1_0 ->
                                                           c_inp0_0 <= c_inp1_0)
                                                          to c_c_1 ->
                                                          if c_c_1
                                                          then return 1.0
                                                          else
                                                          (return e_x)
                                                          to c_inp0_4 ->
                                                          ((return e_x)
                                                           to c_a0_3 ->
                                                           ((return e_n)
                                                            to c_inp0_2 ->
                                                            (return 1)
                                                            to c_inp1_2 ->
                                                            c_inp0_2 - c_inp1_2)
                                                           to c_a1_3 ->
                                                           ((return
                                                               (thunk
                                                                  (\ (aa_0_6 : Double) ->
                                                                     return
                                                                       (thunk
                                                                          (\ (aa_1_6 : Int) ->
                                                                             (force
                                                                                e_pow)
                                                                               aa_0_6
                                                                               aa_1_6)))))
                                                            to c_f0_3 ->
                                                            (force c_f0_3)
                                                              c_a0_3)
                                                           to c_f1_3 ->
                                                           (force c_f1_3)
                                                             c_a1_3)
                                                          to c_inp1_4 ->
                                                          c_inp0_4
                                                            *. c_inp1_4)))))
                                         to c_r_5 ->
                                         force c_r_5)))
                                  to aa_0_4_temp ->
                                  (force aa_0_4_temp) aa_0_4)
                                 to aa_1_4_temp ->
                                 (force aa_1_4_temp) aa_1_4) aa_0_7 aa_1_7)))))
           to aa_0_5_temp ->
           (force aa_0_5_temp) aa_0_5)
          to aa_1_5_temp ->
          (force aa_1_5_temp) aa_1_5))
;;
e_fact =
  return
    (thunk
       (\ (aa_0_3 : Int) ->
          (return
             (thunk
                (\ (aa_0_9 : Int) ->
                   (rec (e_fact : Up (Int -> Down Int)) ->
                      \ (aa_0_2 : Int) ->
                        (return
                           (thunk
                              ((return
                                  (thunk
                                     (\ (e_x : Int) ->
                                        ((return e_x) to c_inp0_6 ->
                                         (return 0) to c_inp1_6 ->
                                         c_inp0_6 <= c_inp1_6)
                                        to c_c_7 ->
                                        if c_c_7
                                        then return 1
                                        else
                                        (return e_x) to c_inp0_10 ->
                                        (((return e_x) to c_inp0_8 ->
                                          (return 1) to c_inp1_8 ->
                                          c_inp0_8 - c_inp1_8)
                                         to c_a0_9 ->
                                         (return
                                            (thunk
                                               (\ (aa_0_8 : Int) ->
                                                  (force e_fact) aa_0_8)))
                                         to c_f0_9 ->
                                         (force c_f0_9) c_a0_9)
                                        to c_inp1_10 ->
                                        c_inp0_10 * c_inp1_10)))
                               to c_r_11 ->
                               force c_r_11)))
                        to aa_0_2_temp ->
                        (force aa_0_2_temp) aa_0_2) aa_0_9)))
          to aa_0_3_temp ->
          (force aa_0_3_temp) aa_0_3))
;;
e_sinEntry =
  return
    (thunk
       (\ (aa_0_1 : Double) (aa_1_1 : Int) ->
          ((return
              (thunk
                 (\ (e_x : Double) ->
                    return
                      (thunk
                         (\ (e_n : Int) ->
                            ((return e_x) to c_a0_12 ->
                             (return e_n) to c_a1_12 ->
                             ((return
                                 (thunk
                                    (\ (aa_0_10 : Double) ->
                                       return
                                         (thunk
                                            (\ (aa_1_10 : Int) ->
                                               (force #e_pow) aa_0_10
                                                 aa_1_10)))))
                              to c_f0_12 ->
                              (force c_f0_12) c_a0_12)
                             to c_f1_12 ->
                             (force c_f1_12) c_a1_12)
                            to c_inp0_15 ->
                            (((return e_n) to c_a0_13 ->
                              (return
                                 (thunk
                                    (\ (aa_0_11 : Int) ->
                                       (force #e_fact) aa_0_11)))
                              to c_f0_13 ->
                              (force c_f0_13) c_a0_13)
                             to c_inp_14 ->
                             intToDouble c_inp_14)
                            to c_inp1_15 ->
                            c_inp0_15 /. c_inp1_15)))))
           to aa_0_1_temp ->
           (force aa_0_1_temp) aa_0_1)
          to aa_1_1_temp ->
          (force aa_1_1_temp) aa_1_1))
;;
e_sin =
  return
    (thunk
       (\ (aa_0_0 : Double) ->
          (return
             (thunk
                (\ (e_x : Double) ->
                   ((((((((return e_x) to c_a0_16 ->
                          (return 1) to c_a1_16 ->
                          ((return
                              (thunk
                                 (\ (aa_0_12 : Double) ->
                                    return
                                      (thunk
                                         (\ (aa_1_12 : Int) ->
                                            (force #e_sinEntry) aa_0_12
                                              aa_1_12)))))
                           to c_f0_16 ->
                           (force c_f0_16) c_a0_16)
                          to c_f1_16 ->
                          (force c_f1_16) c_a1_16)
                         to c_inp0_18 ->
                         ((return e_x) to c_a0_17 ->
                          (return 3) to c_a1_17 ->
                          ((return
                              (thunk
                                 (\ (aa_0_13 : Double) ->
                                    return
                                      (thunk
                                         (\ (aa_1_13 : Int) ->
                                            (force #e_sinEntry) aa_0_13
                                              aa_1_13)))))
                           to c_f0_17 ->
                           (force c_f0_17) c_a0_17)
                          to c_f1_17 ->
                          (force c_f1_17) c_a1_17)
                         to c_inp1_18 ->
                         c_inp0_18 -. c_inp1_18)
                        to c_inp0_20 ->
                        ((return e_x) to c_a0_19 ->
                         (return 5) to c_a1_19 ->
                         ((return
                             (thunk
                                (\ (aa_0_14 : Double) ->
                                   return
                                     (thunk
                                        (\ (aa_1_14 : Int) ->
                                           (force #e_sinEntry) aa_0_14
                                             aa_1_14)))))
                          to c_f0_19 ->
                          (force c_f0_19) c_a0_19)
                         to c_f1_19 ->
                         (force c_f1_19) c_a1_19)
                        to c_inp1_20 ->
                        c_inp0_20 +. c_inp1_20)
                       to c_inp0_22 ->
                       ((return e_x) to c_a0_21 ->
                        (return 7) to c_a1_21 ->
                        ((return
                            (thunk
                               (\ (aa_0_15 : Double) ->
                                  return
                                    (thunk
                                       (\ (aa_1_15 : Int) ->
                                          (force #e_sinEntry) aa_0_15
                                            aa_1_15)))))
                         to c_f0_21 ->
                         (force c_f0_21) c_a0_21)
                        to c_f1_21 ->
                        (force c_f1_21) c_a1_21)
                       to c_inp1_22 ->
                       c_inp0_22 -. c_inp1_22)
                      to c_inp0_24 ->
                      ((return e_x) to c_a0_23 ->
                       (return 9) to c_a1_23 ->
                       ((return
                           (thunk
                              (\ (aa_0_16 : Double) ->
                                 return
                                   (thunk
                                      (\ (aa_1_16 : Int) ->
                                         (force #e_sinEntry) aa_0_16
                                           aa_1_16)))))
                        to c_f0_23 ->
                        (force c_f0_23) c_a0_23)
                       to c_f1_23 ->
                       (force c_f1_23) c_a1_23)
                      to c_inp1_24 ->
                      c_inp0_24 +. c_inp1_24)
                     to c_inp0_26 ->
                     ((return e_x) to c_a0_25 ->
                      (return 11) to c_a1_25 ->
                      ((return
                          (thunk
                             (\ (aa_0_17 : Double) ->
                                return
                                  (thunk
                                     (\ (aa_1_17 : Int) ->
                                        (force #e_sinEntry) aa_0_17 aa_1_17)))))
                       to c_f0_25 ->
                       (force c_f0_25) c_a0_25)
                      to c_f1_25 ->
                      (force c_f1_25) c_a1_25)
                     to c_inp1_26 ->
                     c_inp0_26 -. c_inp1_26)
                    to c_inp0_28 ->
                    ((return e_x) to c_a0_27 ->
                     (return 13) to c_a1_27 ->
                     ((return
                         (thunk
                            (\ (aa_0_18 : Double) ->
                               return
                                 (thunk
                                    (\ (aa_1_18 : Int) ->
                                       (force #e_sinEntry) aa_0_18 aa_1_18)))))
                      to c_f0_27 ->
                      (force c_f0_27) c_a0_27)
                     to c_f1_27 ->
                     (force c_f1_27) c_a1_27)
                    to c_inp1_28 ->
                    c_inp0_28 +. c_inp1_28)
                   to c_inp0_30 ->
                   ((return e_x) to c_a0_29 ->
                    (return 15) to c_a1_29 ->
                    ((return
                        (thunk
                           (\ (aa_0_19 : Double) ->
                              return
                                (thunk
                                   (\ (aa_1_19 : Int) ->
                                      (force #e_sinEntry) aa_0_19 aa_1_19)))))
                     to c_f0_29 ->
                     (force c_f0_29) c_a0_29)
                    to c_f1_29 ->
                    (force c_f1_29) c_a1_29)
                   to c_inp1_30 ->
                   c_inp0_30 -. c_inp1_30)))
          to aa_0_0_temp ->
          (force aa_0_0_temp) aa_0_0))
;;
e_main =
  ((return 0.5) to c_a0_31 ->
   (return (thunk (\ (aa_0_20 : Double) -> (force #e_sin) aa_0_20)))
   to c_f0_31 ->
   (force c_f0_31) c_a0_31)
  to c_v_32 ->
  printDouble c_v_32 before return 0